// ðŸŽ¨ FOLLOWUPJOY: UI Wireframe for Clinic Dashboard (Modularized)

import React, { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";
import AppointmentForm from "./components/AppointmentForm";
import AppointmentsList from "./components/AppointmentsList";
import ReminderLog from "./components/ReminderLog";

const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);

export default function Dashboard() {
  const [appointments, setAppointments] = useState([]);
  const [form, setForm] = useState({ name: "", datetime: "", doctorId: "", channel: "sms" });
  const [doctors, setDoctors] = useState([]);
  const [patientSearch, setPatientSearch] = useState("");
  const [allPatients, setAllPatients] = useState([]);
  const [autocompleteResults, setAutocompleteResults] = useState([]);
  const [diagnosisFilter, setDiagnosisFilter] = useState("");
  const [reminderLogs, setReminderLogs] = useState([]);

  useEffect(() => {
    fetchAppointments();
    fetchDoctors();
    fetchAllPatients();
    fetchReminderLogs();

    const reminderSubscription = supabase
      .channel("custom-reminders")
      .on("postgres_changes", { event: "*", schema: "public", table: "reminder_logs" }, () => {
        fetchReminderLogs();
      })
      .subscribe();

    return () => {
      supabase.removeChannel(reminderSubscription);
    };
  }, []);

  async function fetchAppointments() {
    const { data, error } = await supabase
      .from("appointments")
      .select("id, datetime, patients(name), doctors(name)")
      .eq("status", "scheduled")
      .order("datetime", { ascending: true });

    if (!error) setAppointments(data);
    else console.error("Fetch appointments error:", error);
  }

  async function fetchDoctors() {
    const { data, error } = await supabase.from("doctors").select();
    if (!error) setDoctors(data);
    else console.error("Fetch doctors error:", error);
  }

  async function fetchAllPatients() {
    const { data, error } = await supabase.from("patients").select("name, preferred_language, last_visit, recent_diagnoses");
    if (!error) setAllPatients(data);
    else console.error("Fetch patients error:", error);
  }

  async function fetchReminderLogs() {
    const { data, error } = await supabase
      .from("reminder_logs")
      .select("id, patient_name, status, created_at")
      .order("created_at", { ascending: false });

    if (!error) setReminderLogs(data);
    else console.error("Fetch reminder logs error:", error);
  }

  async function sendReminder(id) {
    try {
      await fetch("/api/send-reminder", {
        method: "POST",
        body: JSON.stringify({ appointmentId: id }),
      });
      fetchAppointments();
    } catch (err) {
      console.error("Send reminder error:", err);
    }
  }

  async function addAppointment() {
    if (!form.name || !form.datetime || !form.doctorId) return;

    let existing = allPatients.find((p) => p.name.toLowerCase() === form.name.toLowerCase());
    let patient;

    if (!existing) {
      const { data, error } = await supabase
        .from("patients")
        .insert([{ name: form.name, phone: "123", preferred_language: "en" }])
        .select()
        .single();

      if (error) {
        console.error("Insert patient error:", error);
        return;
      }
      patient = data;
    } else {
      patient = existing;
    }

    const { error: apptError } = await supabase.from("appointments").insert({
      patient_id: patient.id,
      doctor_id: form.doctorId,
      datetime: form.datetime,
      status: "scheduled",
      channel: form.channel,
    });

    if (apptError) {
      console.error("Insert appointment error:", apptError);
      return;
    }

    setForm({ name: "", datetime: "", doctorId: "", channel: "sms" });
    fetchAppointments();
  }

  useEffect(() => {
    const timeout = setTimeout(() => {
      let matches = allPatients.filter((p) =>
        p.name.toLowerCase().includes(form.name.toLowerCase())
      );
      if (diagnosisFilter) {
        matches = matches.filter((p) =>
          p.recent_diagnoses?.toLowerCase().includes(diagnosisFilter.toLowerCase())
        );
      }
      setAutocompleteResults(matches);
    }, 200);

    return () => clearTimeout(timeout);
  }, [form.name, allPatients, diagnosisFilter]);

  const filteredAppointments = appointments.filter((appt) =>
    appt.patients?.name.toLowerCase().includes(patientSearch.toLowerCase())
  );

  return (
    <div className="grid gap-4 p-4 md:grid-cols-3">
      <AppointmentForm
        form={form}
        setForm={setForm}
        doctors={doctors}
        addAppointment={addAppointment}
        autocompleteResults={autocompleteResults}
        diagnosisFilter={diagnosisFilter}
        setDiagnosisFilter={setDiagnosisFilter}
      />
      <AppointmentsList appointments={filteredAppointments} sendReminder={sendReminder} setPatientSearch={setPatientSearch} />
      <ReminderLog logs={reminderLogs} />
    </div>
  );
}
